#Requires -Version 5.1
<#
.SYNOPSIS
    Orchestrates a multi-phase, robust uninstallation of the SentinelOne agent from the Metascript context.
.DESCRIPTION
    This script is the definitive uninstaller for the C9SP-SentinelOne software package. It uses a phased
    playbook to attempt removal, escalating its methods from graceful to aggressive.
.NOTES
    Author:     Josh Phillips
    Created:    07/15/2025
    Version:    20270722-01 - Refactored into a multi-phase playbook with helper functions.
                            - Added 'sentinelctl unprotect' as an escalation step.
                            - Added verification for SentinelCleaner via 'sc-exit-code.txt'.
#>

# =================================================================================
# --- METASCRIPT CONTEXT ---
# =================================================================================
$ProgressPreference = 'SilentlyContinue'
$VerbosePreference = 'Continue'

try {
    Write-Verbose "--- C9-S1 Uninstall Metascript Started ---"

    $Passphrase = $null
    Write-Verbose "Attempting to retrieve passphrase from integration..."
    try {
        $Passphrase = Get-IntegrationAgentUninstallToken -ErrorAction Stop
        if ([string]::IsNullOrWhiteSpace($Passphrase)) { throw "Integration returned a null or empty passphrase." }
        Write-Verbose "Successfully retrieved passphrase via integration."
    } catch {
        Write-Warning "Could not retrieve uninstall passphrase. Error: $($_.Exception.Message). Proceeding without it, which will limit passphrase-required methods."
    }

    Write-Host "Invoking multi-phase uninstall playbook on the endpoint..."
    $result = Invoke-ImmyCommand -ScriptBlock {
        # =========================================================================
        # --- SYSTEM CONTEXT SCRIPTBLOCK (Endpoint Logic) ---
        # =========================================================================

        #region Setup and Helper Functions
        # Todo: move these to a module for reusability.
        # ========================================================================
        $logDir = "C:\ProgramData\ImmyBot\S1"
        if (-not (Test-Path $logDir)) { New-Item -Path $logDir -ItemType Directory -Force | Out-Null }
        $logFile = Join-Path -Path $logDir -ChildPath "s1_uninstall_playbook_$(Get-Date -Format 'yyyyMMdd-HHmmss').log"
        Start-Transcript -Path $logFile -Force

        $Passphrase = $using:Passphrase
        $Global:downloadedInstallerPath = $null
        $Global:legacyCleanerPath = $null

        function Test-S1IsFullyRemoved {
            Write-Verbose "VERIFICATION: Checking if agent is fully removed..."
            $service = Get-CimInstance -ClassName Win32_Service -Filter "Name='SentinelAgent'" -ErrorAction SilentlyContinue
            $installDir = Get-Item "C:\Program Files\SentinelOne\Sentinel Agent*" -ErrorAction SilentlyContinue
            if (-not $service -and -not $installDir) {
                Write-Verbose "VERIFICATION PASSED: Service and install directory are gone."
                return $true
            }
            Write-Warning "VERIFICATION FAILED: Service or install directory still present."
            return $false
        }

        function Get-InstallerAvailable {
            [CmdletBinding()]
            param([string]$DownloadUrl, [string]$FileName)
            
            $immyTempPath = Join-Path -Path $env:ProgramData -ChildPath 'ImmyBot\Temp'
            if (-not (Test-Path -Path $immyTempPath)) { New-Item -Path $immyTempPath -ItemType Directory -Force | Out-Null }
            $destinationPath = Join-Path $immyTempPath $FileName
            
            if (Test-Path -Path $destinationPath) {
                Write-Verbose "File '$FileName' already exists at '$destinationPath'. Skipping download."
                return $destinationPath
            }
            try {
                Write-Verbose "Attempting to download from '$DownloadUrl' to path '$destinationPath'..."
                Invoke-WebRequest -Uri $DownloadUrl -OutFile $destinationPath -UseBasicParsing -ErrorAction Stop
                Write-Host "SUCCESS: File downloaded to '$destinationPath'."
                return $destinationPath
            } catch { throw "Failed to download '$FileName'. Error: $_" }
        }

        function Invoke-StandardUninstall {
            Write-Verbose "Attempting standard uninstall (uninstall.exe)..."
            if (-not (Get-CimInstance -ClassName Win32_Service -Filter "Name='SentinelAgent'" -ErrorAction SilentlyContinue)) {
                Write-Warning "SKIPPED: 'SentinelAgent' service not present."
                return $false
            }
            $service = Get-CimInstance -ClassName Win32_Service -Filter "Name='SentinelAgent'"
            $uninstallExe = Join-Path -Path (Split-Path -Path ($service.PathName.Trim('"')) -Parent) -ChildPath "uninstall.exe"
            if (-not (Test-Path -LiteralPath $uninstallExe)) {
                Write-Warning "FAILED: Standard uninstaller not found at '$uninstallExe'."
                return $false
            }
            $argList = @('/uninstall', '/norestart', '/q', '/k', $Passphrase)
            & $uninstallExe $argList 2>&1 | Out-String | Write-Verbose
            Write-Verbose "Standard uninstall process finished with exit code: $LASTEXITCODE."
            return (Test-S1IsFullyRemoved)
        }

        function Invoke-ModernCleaner {
            Write-Verbose "Attempting modern installer cleanup (SentinelOneInstaller.exe -c)..."
            $installerUrl = "https://raw.githubusercontent.com/joshphillipssr/immybot/main/SentinelOne/Tools/SentinelOneInstaller_windows_64bit_v24_2_3_471.exe"
            $Global:downloadedInstallerPath = Get-InstallerAvailable -DownloadUrl $installerUrl -FileName "SentinelOneInstaller.exe"
            $argList = @('-c', '-k', $Passphrase, '--qn')
            Start-Process -FilePath $Global:downloadedInstallerPath -ArgumentList $argList -Wait -NoNewWindow
            Write-Verbose "Modern cleaner process finished with exit code: $LASTEXITCODE."
            return (Test-S1IsFullyRemoved)
        }

        function Disable-S1AgentProtection {
            Write-Verbose "Attempting to disable agent self-protection (sentinelctl unprotect)..."
            $sentinelCtlPath = Resolve-Path "C:\Program Files\SentinelOne\Sentinel Agent*\SentinelCtl.exe" -ErrorAction SilentlyContinue
            if (-not $sentinelCtlPath) {
                Write-Warning "SKIPPED: SentinelCtl.exe not found, cannot unprotect."
                return
            }
            $argList = @('unprotect', '-k', $Passphrase)
            & $sentinelCtlPath.Path $argList 2>&1 | Out-String | Write-Verbose
            Write-Verbose "Unprotect command finished with exit code: $LASTEXITCODE."
            Start-Sleep -Seconds 2 # Brief pause to allow state to change
        }

        function Invoke-LegacyCleaner {
            Write-Verbose "Attempting legacy standalone cleaner (SentinelCleaner.exe)..."
            $cleanerUrl = "https://raw.githubusercontent.com/joshphillipssr/immybot/main/SentinelOne/Tools/SentinelCleaner_22_1GA_64.exe"
            $Global:legacyCleanerPath = Get-InstallerAvailable -DownloadUrl $cleanerUrl -FileName "SentinelCleaner.exe"
            Start-Process -FilePath $Global:legacyCleanerPath -Wait -NoNewWindow
            Write-Verbose "Legacy cleaner process finished with exit code: $LASTEXITCODE."
            Start-Sleep -Seconds 5

            # New verification step based on your discovery
            $cleanerExitCodeFile = "C:\Windows\Temp\sc-exit-code.txt"
            if (Test-Path $cleanerExitCodeFile) {
                $cleanerExitCode = Get-Content $cleanerExitCodeFile
                Write-Verbose "Found cleaner exit code file with value: $cleanerExitCode"
                Remove-Item $cleanerExitCodeFile -Force -ErrorAction SilentlyContinue
                if ($cleanerExitCode -ne '0') {
                    Write-Warning "Legacy cleaner reported a non-zero exit code ($cleanerExitCode) via its log file."
                }
            } else {
                Write-Warning "Legacy cleaner did not create an exit code file. Its success is unconfirmed."
            }
            return (Test-S1IsFullyRemoved)
        }
        #endregion
        
        # ======================= THE PLAYBOOK =======================
        try {
            if (Test-S1IsFullyRemoved) { Write-Host "Agent already removed. Exiting."; return $true }
            
            if (-not [string]::IsNullOrWhiteSpace($Passphrase)) {
                Write-Host "--- PHASE 1: Initial Graceful Removal Attempts ---"
                if (Invoke-StandardUninstall) { Write-Host "SUCCESS: Phase 1 (Standard) complete."; return $true }
                if (Invoke-ModernCleaner) { Write-Host "SUCCESS: Phase 1 (Modern) complete."; return $true }
                
                Write-Host "--- PHASE 2: Escalation - Disabling Self-Protection ---"
                Disable-S1AgentProtection

                Write-Host "--- PHASE 3: Post-Unprotect Removal Attempts ---"
                if (Invoke-StandardUninstall) { Write-Host "SUCCESS: Phase 3 (Standard) complete."; return $true }
                if (Invoke-ModernCleaner) { Write-Host "SUCCESS: Phase 3 (Modern) complete."; return $true }
            } else {
                Write-Warning "SKIPPING Phases 1, 2, and 3 because no uninstall passphrase was provided."
            }

            Write-Host "--- PHASE 4: Final Escalation - The Nuclear Option ---"
            if (Invoke-LegacyCleaner) { Write-Host "SUCCESS: Phase 4 (Legacy Cleaner) complete."; return $true }

            Write-Error "ALL REMOVAL METHODS FAILED. Agent is still present."
            return $false

        } catch {
            Write-Error "A fatal, unexpected error occurred in the uninstall playbook: $_"
            return $false
        } finally {
            if ($Global:downloadedInstallerPath -and (Test-Path $Global:downloadedInstallerPath)) { Remove-Item -Path $Global:downloadedInstallerPath -Force -ErrorAction SilentlyContinue }
            if ($Global:legacyCleanerPath -and (Test-Path $Global:legacyCleanerPath)) { Remove-Item -Path $Global:legacyCleanerPath -Force -ErrorAction SilentlyContinue }
            Stop-Transcript
        }
    }

    # =================================================================================
    # --- METASCRIPT CONTEXT (Final check) ---
    # =================================================================================
    if ($result -eq $true) {
        Write-Host "[SUCCESS] Uninstall playbook completed successfully on the endpoint."
    } else {
        throw "Uninstall playbook on the endpoint failed or did not complete. Check the script logs for details."
    }

} catch {
    $errorMessage = "A fatal error occurred in the Uninstallation Metascript: $($_.Exception.Message)"
    Write-Error $errorMessage
    throw $errorMessage
}
