# =================================================================================
# Name:     C9SP-SentinelOne-DynamicVersions Script
# Author:   Josh Phillips
# Contact:  josh@c9cg.com
# Docs:     https://immydocs.c9cg.com
# =================================================================================

Import-Module C9SentinelOneCloud
$AuthHeader = Connect-C9S1API -S1Uri $SentinelOneUri -S1ApiToken $ApiKey  
$AuthHeader | Out-String | Write-Verbose

# This is no longer needed when returning all architectures
# $osArch = $(Get-ImmyComputer -InventoryKeys WindowsSystemInfo).Inventory.WindowsSystemInfo.ProcessorArchitecture | Select-Object -first 1
# switch -wildcard ($osArch) {
#     "*32*"  { $Architecture = 'x86' }
#     "*arm*" { $Architecture = 'ARM64' }
#     Default { $Architecture = 'x64' }
# }
# Write-Host "Using osArch: $osArch"

$SystemInfo = Invoke-C9S1RestMethod -Endpoint 'system/info'
$QueryParameters = @{
    limit = 50
    # latestGAsOnly = $true
    status = 'ga'
    sortBy = 'version'
    sortOrder = 'desc'
    osTypes = 'windows'
    fileExtensions = '.msi,.exe'
    osArches = '64 bit,32 bit,ARM64'
    # fileExtension = '.msi' #'.exe'
    # osArches=$osArch
}
try
{
    Write-Output "Fetching DownloadLinks..."
    $DownloadLinks = Invoke-C9S1RestMethod -Endpoint "update/agent/packages" -QueryParameters $QueryParameters
    $DownloadLinkCount = $DownloadLinks | Measure-Object | Select-Object -Expand Count
    Write-Verbose "Retrieved $DownloadLinkCount DownloadLink(s) including EXE installers for X86 and X64"
    $DownloadLinks | Format-List * | Out-String | Write-Verbose
    $TruncateVersion = $false
    if($DisplayVersion)
    {
        $TruncateVersion = ([Version]$DisplayVersion).Revision -eq -1
    }
    $Versions = $DownloadLinks | %{
        # EPARIZEAU 9/26/2023 - Check to make sure the filename isn't "storage-agent-installer*"
        if($_.fileName -like "storage-agent-installer*") {            
            return
        }
        # BR Excluding EXE installers for X86 and X64
        if ($_.fileName -like "*.exe" -and $_.OsArch -ne 'ARM64') {
            return
        }
        $DownloadLink = $_
        [Version]$Version = $DownloadLink.Version
        if($TruncateVersion)
        {
            $TruncatedVersion = "$($Version.Major).$($Version.Minor).$($Version.Revision)"
            Write-Verbose "Machine has 4 digit version $DisplayVersion, truncating API version to 3 digits: $Version -> $TruncatedVersion"
            $Version = $TruncatedVersion
        }
        switch ($DownloadLink.OsArch) {
            '64 bit' {
                $FileArchitecture = "X64"
            }
            '32 bit' {
                $FileArchitecture = "X86"
            }
            'ARM64' {
                $FileArchitecture = 'ARM64'
            }
        }
        New-DynamicVersion -Url $_.link -Version $Version -FileName $_.FileName -Architecture $FileArchitecture -PackageType Executable
    }

    $Response = New-Object PSObject -Property @{
        Versions = @($Versions)
    }
    Write-Output $Response
} catch
{
    if($_.ErrorDetails.Message)
    {
        $e = $_.ErrorDetails.Message | ConvertFrom-Json | Select-Object errors
        throw "Error connecting to SentinelOne API: $($e.errors.title)"
    } else
    {
        throw "Error connecting to SentinelOne API"
    }    
}
