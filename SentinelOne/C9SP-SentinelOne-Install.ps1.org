
Import-Module SentinelOne
$SiteName = $TenantName
if($SiteNameOverride)
{   
    Write-Host "Overriding $TenantName with $SiteNameOverride"
    $SiteName = $SiteNameOverride
}
Write-Host "SiteName: $SiteName"
# $SiteName = [uri]::EscapeDataString($SiteName)
# Write-Host "EscapedSiteName: $SiteName"

$AuthHeader = Connect-S1API -S1Uri $SentinelOneUri -S1ApiToken $ApiKey
$Site = Get-S1Site -Name $SiteName -Verbose

if(!$Site)
{
    if($CreateSiteIfMissing -ne $true)
    {
        throw "Unable to find site with name $SiteName, set CreateSiteIfMissing to true if you would like Immy to create this site for you automatically"
    }
    $Accounts = Invoke-S1RestMethod -Endpoint "accounts" 
    $Accounts | Write-Variable
    $Account = $Accounts | Should-HaveOne "SentinelOne Account" -PassThru
    Write-Host "Creating site for $SiteName"
    $SitePayload = New-Object PSObject -Property ([Ordered]@{
            data = @{
                name = $SiteName                
                inherits = $true
                unlimitedLicenses = $false
                totalLicenses = 50
                sku = 'Control'
                accountId = $Account.id
                # expiration = $null
                # isDefault = $false
                # siteType = "Paid"
                # accountName = $Account.name
            }
        })
    $VerbosePreference = 'continue'
    $Site = Invoke-S1RestMethod -Method POST -Endpoint "sites" -Body (ConvertTo-Json $SitePayload)
} 
try
{
    $Site | Should-HaveOne "Site with name $SiteName" -TakeFirst
} catch
{
    $Site = Get-S1Site -Verbose | ?{$_ -like $SiteName}
}

Write-Host "Using site $($Site.name) with registrationToken: $($site.registrationToken)"
Write-Host ($Site | Format-List * | Out-String)

$LicenseValue = $site.registrationToken

if($GroupNameOverride)
{
    $GroupPayload = @{
        siteIds = $Site.id;
        name = $GroupNameOverride;
    }
    Write-Host (ConvertTo-Json $GroupPayload)
    $Group = Invoke-S1RestMethod -Method GET -Endpoint "groups" -QueryParameters $GroupPayload

    $Group | Should-HaveOne "Group with name $GroupNameOverride"
    if(!$Group.registrationToken){
        if($site.registrationToken){
            throw "$($Site.name) has a registration token but $($Site.name)->$($Group.name) does not have a registration token. Are you sure this group is setup correctly in SentinelOne?`r`n$($Group | Format-List * | Out-String)"
        }
        throw "Neither site $($Site.name) nor group $($Group.name) have a registration token."
    }
    Write-Host "Using group $($Group.name) at site $($Site.name) with registrationToken: $($Group.registrationToken)"
    Write-Host ($Group | Format-List * | Out-String)

    $LicenseValue = $group.registrationToken
}

#/q /norestart /NOUI /SITE_TOKEN=$LicenseValue /SILENT /LOG="$InstallerLogFile"
# https://success.alienvault.com/s/article/SentinelOne-Agent-Installer-Command-Line-Options
if($InstallerFile.EndsWith(".exe"))
{
    switch(([Version]$DisplayVersion))
{
    {$_ -lt [Version]"22.1" }
    {
        Write-Warning "Ancient EXE"
        $ArgumentList = @"
-q /norestart /NOUI -t $LicenseValue /SILENT /LOG="$InstallerLogFile"
"@
        <#
        https://usea1-pax8.sentinelone.net/docs/en/windows-agent-installer-command-line-options.html#idm45287880942144
        Action and Description

Option

Silent installation (no UI, no user interaction, no reboot).

/q, /QUIET, /s, /SILENT

With a Silent installation switch, you can use an optional flag for endpoint reboot:

Install the Agent without an automatic reboot. Use for mass deployment when you send a message to users to restart their computers at the end of the day, or if you have a reboot scheduled for a specified time.

/NORESTART

Always automatically reboot the endpoint after Agent installation.

/FORCERESTART

Install the Agent with an automatic reboot, if required.

/REBOOT

Install the Agent with the UI disabled (no tray icon or notifications).

/NOUI

Disable Agent logging.

/NOLOGGING

Assign Agents to a Site or Group.

/SITE_TOKEN=string

Customize the path for Agent database, logs, and large data files.

Requirements
The path must be in English, 150 characters or less.

The path must be a fixed drive (it cannot be a USB or other removable media), and it must be NTFS.

If the path is not on the System drive, it must have at least 4 GB free space.

(Supported from Agent versions 3.6)

/INSTALL_PATH_DATA=drive:\path

Set a proxy server between the Agent and its Management.

Mode valid values:

auto = use the Windows LAN settings (PAC file)
system = use Other proxy (not from OS) configured in the local Agent
user,fallback[:port] = user mode on Windows

http://{IP | FQDN}:[port]

/SERVER_PROXY=mode

Set credentials to authenticate with the Management proxy.

/SERVER_PROXY_CREDENTIALS=user:pass 

Set a proxy server between the Agent and the Deep Visibility™ EDR data server. 

Mode valid values:

single = use the same proxy for Management and for Deep Visibility™

auto = use the Windows LAN settings (PAC file)

system = use Other proxy (not from OS) configured in the local Agent

user,fallback[:port] = user mode on Windows

http://{IP | FQDN}:[port]

/IOC_PROXY=mode

Set credentials to authenticate with the Deep Visibility™ proxy.

/IOC_PROXY_CREDENTIALS=”username:password”

Prevent fallback to direct communication if the proxy is not available.

Important! If the Management proxy or the Deep Visibility™ proxy is configured with user mode, do not use Force Proxy

/FORCE_PROXY

Set the Agent installation to disable or not disable Windows Defender.

With the new installer (Win 22.1+):

SentinelOneInstaller.exe -a "WSC=true | false"
true = disable Windows Defender

false = do not disable Windows Defender

For the old installer (before Win 22.1): If /WSCOFF is given, Windows Defender is not disabled.

WSC={true | false}

or

/WSCOFF

Add a user-defined Identifier string to the endpoint.

/CUSTOMER_ID="Customer Identifier string"

Install on Virtual Desktop Infrastructure or VMs with a Golden (Master) Image.

Important: This property is NOT recommended for all VM installation types. See Installing Windows Agents on VM or VDI for when this property is recommended.

/VDI
#>
    }
    { $_ -ge [Version]"22.1" -and $_ -lt [Version]"22.2"}
    {
        $ArgumentList = "--dont_fail_on_config_preserving_failures -t $LicenseValue -f --qn "
        Write-Warning "--dont_fail_on_config_preserving_failures mandatory"
        <#
Important: This parameter is mandatory for version 22.1 but optional for versions 22.2+.
        --dont_fail_on_config_preserving_failures
The installer will always try to preserve the configuration. If you add this parameter, it will not stop on failure if it cannot preserve the previous Agent configuration.
#>
    }
    default
    {
        $ArgumentList = "-t $LicenseValue -f --qn"
        Write-Host "$_ 2023+ 'new' exe`r`n"
    }
}
    
} else
{
    $ArgumentList = @"
/qn /l*v "$InstallerLogFile" REBOOT=REALLYSUPPRESS /norestart UI=false SITE_TOKEN=$LicenseValue 
"@
}
Start-ProcessWithLogTail -Path $InstallerFile -LogFilePath $InstallerLogFile -TimeoutSeconds 900 -ArgumentList $ArgumentList -RegexFilter 'error'
$ArgumentList | Write-Variable
return
Invoke-ImmyCommand -Timeout 900 {
    $LicenseValue = $using:LicenseValue
    $InstallerLogFile = $using:InstallerLogFile
    $InstallerFile = $using:InstallerFile
    $ArgumentList = $using:ArgumentList  
  
    # if($ServerProxy) {
    #     $ArgumentList += @"
    #     /SERVER_PROXY=$ServerProxy
    #     "
    # }

    Write-Host "Starting Installation"
    $InstallProcess = Start-Process $InstallerFile -ArgumentList $ArgumentList -Passthru
    $SecondsElapsed = 0
    do 
    {
        Start-Sleep -s 1	
    } until ($InstallProcess.HasExited -or $SecondsElapsed++ -gt 300)

    Write-Host "ExitCode: $($InstallProcess.ExitCode)"
    if(!$InstallProcess.HasExited)
    {
        Write-Host "Installation Timed Out. Force Quitting."
        taskkill /PID $InstallProcess.Id /F
    }
    if($InstallProcess.ExitCode -ne 0)
    {
        Get-Content $InstallerLogFile | select -Last 200
    }
}
Write-Host "Attempting to get AgentUUID from Registry"
$JWT = Get-WindowsRegistryValue -Path "HKLM:\SOFTWARE\Sentinel Labs\State" -Name authCookie
$AgentUuid = ConvertFrom-Base64Url ($JWT -split '\.')[0] | ConvertFrom-JSON | Select-Object -ExpandProperty u
Write-Host "AgentUuid: $AgentUuid"