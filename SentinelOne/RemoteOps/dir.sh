#!/bin/bash

checkIfRoot() {
    if ! [ $(id -u) = 0 ]; then
        echo "You must be running this script as root"
        echo "Exiting..."
        exit 126;
    fi
}

detectOS(){
    case $(echo $(uname -s) | tr '[:upper:]' '[:lower:]') in
        darwin*)  os="mac";;
        linux*)   os="linux" ;;
        bsd*)     os="bsd" ;;
        *)        os="unknown" ;;
    esac
}

setResultOutputDir() {
    resultOutputDir="/opt/sentinelone/rso/"  # Default output directory for Linux
    if [ ! -z "$S1_OUTPUT_DIR_PATH" ]; then
        resultOutputDir="$S1_OUTPUT_DIR_PATH"  # Agent supplied the output directory using an environment variable
        if [ ! "$resultOutputDir" = "*/" ]; then
            resultOutputDir="${resultOutputDir}/"  # Append slash at the end
        fi
    fi

    # Create output dir if not exists
    mkdir -p "${resultOutputDir}"
    echo "Script output directory is: $resultOutputDir"
}

echoerr() {
    printf "%s\n" "$*" >&2;
}

checkIfRoot
detectOS
echo "os=$os"
setResultOutputDir


# Create temporary directory for temporary files generated by the script
tempDir="${resultOutputDir}/script_tmp_dir"
mkdir -p "${tempDir}"

setDataSetFilePath() {
    if [ "$os" = "mac" ]; then
        datasetFilePath="/var/sentinelone/rso/dataset.json"
    else
        datasetFilePath="/opt/sentinelone/rso/dataset.json"
    fi

    if [ ! -z "$S1_XDR_OUTPUT_FILE_PATH" ]; then
        datasetFilePath="$S1_XDR_OUTPUT_FILE_PATH"
    fi

    echo "XDR json output file path: $datasetFilePath"
    # Create dataset.json output dir if not exist
    mkdir -p "$(dirname "$datasetFilePath")"
}

# If S1_OUTPUT_DESTINATION variable contains the output destination, create only the file related to destination.
setAddonParserVariables() {
    destinationCloud=true
    destinationDataset=true
    if [ ! -z "$S1_OUTPUT_DESTINATION" ]; then
        if [ "$S1_OUTPUT_DESTINATION" = "Cloud" ]; then
            destinationDataset=false
        elif [ "$S1_OUTPUT_DESTINATION" = "DataSet" ]; then
            destinationCloud=false
        fi
    fi
}

setDataSetFilePath
setAddonParserVariables
scriptFileName=$(basename "$0")
resultFileName="$scriptFileName-results.csv"
shopt -s extglob

# Gets variables by name and creates a json
# where the variable name is the key and its value is the correspondent value
# Example: create_json_from_args "pid" "user"
# Result: {'pid': '{pid variable value}', 'user': '{user variable value}' }
create_json_from_args() {
    str="{"
    arg_index=0
    for key in "$@"; do
        if [ $arg_index -ne 0 ]
        then
            str+=", "
        fi
        value=$(eval "echo \$$key")
        case value in
                ?(+|-)+([0-9])?(\.+([0-9])))  str+="\"$key\":$value"      ;;
            *)                                escapedValue="${value//\\/#}"
                                              escapedValue="${escapedValue//\"/ \\\"}"
                                              str+="\"$key\":\"$escapedValue\"";;
        esac
        arg_index=$((arg_index+1))
    done
    str+="}"
    echo "$str"
}

# Creates a serialized array of jsons
# Example: serialize_json_array "${arr[@]}"
# Result: [{...}, {...}, ..., {...}]
serialize_json_array() {
    str="["
    arg_index=0
    for var in "$@"; do
        if [ $arg_index -ne 0 ]; then
            str+=", "
        fi
        str+=$var
        arg_index=$((arg_index+1))
    done
    str+="]"

    echo "$str"
}

jsons=()


if [ -n "$1" ] && [ -d "$1" ]; then
    directory="$1"
else
    directory="/"
fi

cd "$directory"

echo "Disk usage of: $(PWD)"

if [ "$os" = "mac" ] || [ "$os" = "linux" ]
    then
        diskUsageData=$(du -ah)
        if [ "$destinationCloud" = true ]; then
            echo "$diskUsageData" | awk 'BEGIN { FS = "[\t\n]"; printf "Size,Path\n" } ; {printf "%s,%s\n",$1,$2}' > "${resultOutputDir}${resultFileName}"
        fi
        if [ "$destinationDataset" = true ]; then
            echo "$diskUsageData" | awk 'BEGIN { printf "["; } { if (1 != NR) { printf ", "; } printf "{\"size\": \"%s\", \"path\":\"%s\"}",$1,$2 } END { printf "]"; }' > "$datasetFilePath"
        fi
fi




echo "Done!"
exit 0