#!/bin/bash

checkIfRoot() {
    if ! [ $(id -u) = 0 ]; then
        echo "You must be running this script as root"
        echo "Exiting..."
        exit 126;
    fi
}

detectOS(){
    case $(echo $(uname -s) | tr '[:upper:]' '[:lower:]') in
        darwin*)  os="mac";;
        linux*)   os="linux" ;;
        bsd*)     os="bsd" ;;
        *)        os="unknown" ;;
    esac
}

setResultOutputDir() {
    resultOutputDir="/opt/sentinelone/rso/"  # Default output directory for Linux
    if [ ! -z "$S1_OUTPUT_DIR_PATH" ]; then
        resultOutputDir="$S1_OUTPUT_DIR_PATH"  # Agent supplied the output directory using an environment variable
        if [ ! "$resultOutputDir" = "*/" ]; then
            resultOutputDir="${resultOutputDir}/"  # Append slash at the end
        fi
    fi

    # Create output dir if not exists
    mkdir -p "${resultOutputDir}"
    echo "Script output directory is: $resultOutputDir"
}

echoerr() {
    printf "%s\n" "$*" >&2;
}

checkIfRoot
detectOS
echo "os=$os"
setResultOutputDir


# Create temporary directory for temporary files generated by the script
tempDir="${resultOutputDir}/script_tmp_dir"
mkdir -p "${tempDir}"

setDataSetFilePath() {
    if [ "$os" = "mac" ]; then
        datasetFilePath="/var/sentinelone/rso/dataset.json"
    else
        datasetFilePath="/opt/sentinelone/rso/dataset.json"
    fi

    if [ ! -z "$S1_XDR_OUTPUT_FILE_PATH" ]; then
        datasetFilePath="$S1_XDR_OUTPUT_FILE_PATH"
    fi

    echo "XDR json output file path: $datasetFilePath"
    # Create dataset.json output dir if not exist
    mkdir -p "$(dirname "$datasetFilePath")"
}

# If S1_OUTPUT_DESTINATION variable contains the output destination, create only the file related to destination.
setAddonParserVariables() {
    destinationCloud=true
    destinationDataset=true
    if [ ! -z "$S1_OUTPUT_DESTINATION" ]; then
        if [ "$S1_OUTPUT_DESTINATION" = "Cloud" ]; then
            destinationDataset=false
        elif [ "$S1_OUTPUT_DESTINATION" = "DataSet" ]; then
            destinationCloud=false
        fi
    fi
}

setDataSetFilePath
setAddonParserVariables
scriptFileName=$(basename "$0")
resultFileName="$scriptFileName-results.csv"
shopt -s extglob

# Gets variables by name and creates a json
# where the variable name is the key and its value is the correspondent value
# Example: create_json_from_args "pid" "user"
# Result: {'pid': '{pid variable value}', 'user': '{user variable value}' }
create_json_from_args() {
    str="{"
    arg_index=0
    for key in "$@"; do
        if [ $arg_index -ne 0 ]
        then
            str+=", "
        fi
        value=$(eval "echo \$$key")
        case value in
                ?(+|-)+([0-9])?(\.+([0-9])))  str+="\"$key\":$value"      ;;
            *)                                escapedValue="${value//\\/#}"
                                              escapedValue="${escapedValue//\"/ \\\"}"
                                              str+="\"$key\":\"$escapedValue\"";;
        esac
        arg_index=$((arg_index+1))
    done
    str+="}"
    echo "$str"
}

# Creates a serialized array of jsons
# Example: serialize_json_array "${arr[@]}"
# Result: [{...}, {...}, ..., {...}]
serialize_json_array() {
    str="["
    arg_index=0
    for var in "$@"; do
        if [ $arg_index -ne 0 ]; then
            str+=", "
        fi
        str+=$var
        arg_index=$((arg_index+1))
    done
    str+="]"

    echo "$str"
}

jsons=()


detectSpecificLinuxDistro(){
# set -x
    if [ "$os" = "linux" ]; then
        file=""
        if [ -f "/etc/os-release" ]; then
            file="/etc/os-release"
            ID=$(grep -E "^ID=" "$file" | cut -d "=" -f 2)
            local regex='\"*(\w+)\"*'
            if [[ "$ID" =~ $regex ]]; then
              os=${BASH_REMATCH[1]}
            fi
        elif [ -f "/etc/redhat-release" ]; then
            file="/etc/redhat-release"
            os=$(awk '{print $1}' "$file")
            if [ "$os" == 'Red' ]
              then
                os='redhat'
            fi
        else
          os=$(lsb_release -si)
        fi
        os="${os,,}"
    fi
}

detectSpecificLinuxDistro

echo "os=$os"

if [ ! -d "${resultOutputDir}" ]; then
    mkdir -p "${resultOutputDir}"
fi
# set -x


# regex='^(\w+)\s+([0-9]+) ([0-9:]+) ([a-zA-Z0-9_\.-]+) ([a-zA-Z0-9_\.-]+)\[([0-9]+)+\](\s{1}[a-zA-Z0-9\[\]\(\)_\.-]+)*:(.+)'

if [ "$os" = "mac" ]; then
    syslogPath="/var/log/system.log"
    regex='^([a-zA-Z0-9_\.-]+) +([0-9]+) ([0-9:]+) ([a-zA-Z0-9_\.-]+) ([a-zA-Z0-9_\.-]+)\[([0-9]+)+\](\s{1}[a-zA-Z0-9\[\]\(\)_\.-]+)*:(.+)'
fi


if [[  $os == *"debian"* ]]  ||  [[  $os == *"ubuntu"* ]]; then
    syslogPath="/var/log/syslog"
    regex='^(\w+)\s+([0-9]+) ([0-9:]+) ([a-zA-Z0-9_\.-]+) ([a-zA-Z0-9_\.-]+)\[([0-9]+)+\](\s{1}[a-zA-Z0-9\[\]\(\)_\.-]+)*:(.+)'
fi

if [[ $os == *"centos"* ]] ||  [[ $os == *"redhat"* ]] ||  [[ $os == *"rhel"* ]] || [[ $os == *"sles"* ]] ||  [[ $os == *"oracle"* ]] || [[ $os == *"ol"* ]] ||
  [[ $os == *"amazon"* ]] || [[ $os == *"amzn"* ]] || [[ $os == *"fedora"* ]] || [[ $os == *"suse"* ]] || [[ $os == *"scientific"* ]] ||
  [[ $os == *"alma"* ]] || [[ $os == *"rocky"* ]] # rsyslog must be installed on rocky linux to make this script work!
    then
        if [ -f "/var/log/secure" ]; then
            syslogPath="/var/log/secure"
        else
            syslogPath="/var/log/messages"
        fi

        if [[ $os == *"sles"* ]] || [[ $os == *"suse"* ]]; then
            regex='^([0-9]+-[0-9]+-[0-9]+)T([0-9]+:[0-9]+:[0-9]+.[0-9]+).([0-9]+:[0-9]+) (.+) (.+)\[([0-9]+)\]: (.+)'
        else
            regex='^(\w+)\s+([0-9]+) ([0-9:]+) ([a-zA-Z0-9_\.-]+) ([a-zA-Z0-9_\.-]+)\[([0-9]+)+\](\s{1}[a-zA-Z0-9\[\]\(\)_\.-]+)*:(.+)'
        fi
fi

if [ "$destinationCloud" = true ]; then
    # Print csv header
    echo "Date,Host,Program,PID,Message">>"${resultOutputDir}/${resultFileName}"
fi

while IFS=$'\n' read -r line
    do
        if [[ "$line" =~ $regex  ]]; then
            Date="${BASH_REMATCH[1]} ${BASH_REMATCH[2]} ${BASH_REMATCH[3]}"
            Host="${BASH_REMATCH[4]}"
            Program="${BASH_REMATCH[5]}"
            PID="${BASH_REMATCH[6]}"
            Message="${BASH_REMATCH[@]: -1}"
            if [ "$destinationCloud" = true ]; then
                echo "${Date},${Host},${Program},${PID},${Message}">>"${resultOutputDir}/${resultFileName}"
            fi
            if [ "$destinationDataset" = true ]; then
                previousIFS=$IFS
                IFS=''
                jsons+=($(create_json_from_args "Date" "Host" "Program" "PID" "Message"))
                IFS=$previousIFS
            fi
        fi

done <${syslogPath}



if [ -z "$S1_OUTPUT_DESTINATION" ] || [ "$destinationDataset" = true ]; then
    echo $(serialize_json_array "${jsons[@]}") > "$datasetFilePath"
fi

if [ -d "$tempDir" ]; then
    rm -rf "$tempDir"
fi


echo "Done!"
exit 0