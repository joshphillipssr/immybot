#!/bin/bash

checkIfRoot() {
    if ! [ $(id -u) = 0 ]; then
        echo "You must be running this script as root"
        echo "Exiting..."
        exit 126;
    fi
}

detectOS(){
    case $(echo $(uname -s) | tr '[:upper:]' '[:lower:]') in
        darwin*)  os="mac";;
        linux*)   os="linux" ;;
        bsd*)     os="bsd" ;;
        *)        os="unknown" ;;
    esac
}

setResultOutputDir() {
    resultOutputDir="/opt/sentinelone/rso/"  # Default output directory for Linux
    if [ ! -z "$S1_OUTPUT_DIR_PATH" ]; then
        resultOutputDir="$S1_OUTPUT_DIR_PATH"  # Agent supplied the output directory using an environment variable
        if [ ! "$resultOutputDir" = "*/" ]; then
            resultOutputDir="${resultOutputDir}/"  # Append slash at the end
        fi
    fi

    # Create output dir if not exists
    mkdir -p "${resultOutputDir}"
    echo "Script output directory is: $resultOutputDir"
}

echoerr() {
    printf "%s\n" "$*" >&2;
}

checkIfRoot
detectOS
echo "os=$os"
setResultOutputDir


# Create temporary directory for temporary files generated by the script
tempDir="${resultOutputDir}/script_tmp_dir"
mkdir -p "${tempDir}"

setDataSetFilePath() {
    if [ "$os" = "mac" ]; then
        datasetFilePath="/var/sentinelone/rso/dataset.json"
    else
        datasetFilePath="/opt/sentinelone/rso/dataset.json"
    fi

    if [ ! -z "$S1_XDR_OUTPUT_FILE_PATH" ]; then
        datasetFilePath="$S1_XDR_OUTPUT_FILE_PATH"
    fi

    echo "XDR json output file path: $datasetFilePath"
    # Create dataset.json output dir if not exist
    mkdir -p "$(dirname "$datasetFilePath")"
}

# If S1_OUTPUT_DESTINATION variable contains the output destination, create only the file related to destination.
setAddonParserVariables() {
    destinationCloud=true
    destinationDataset=true
    if [ ! -z "$S1_OUTPUT_DESTINATION" ]; then
        if [ "$S1_OUTPUT_DESTINATION" = "Cloud" ]; then
            destinationDataset=false
        elif [ "$S1_OUTPUT_DESTINATION" = "DataSet" ]; then
            destinationCloud=false
        fi
    fi
}

setDataSetFilePath
setAddonParserVariables
scriptFileName=$(basename "$0")
resultFileName="$scriptFileName-results.csv"
shopt -s extglob

# Gets variables by name and creates a json
# where the variable name is the key and its value is the correspondent value
# Example: create_json_from_args "pid" "user"
# Result: {'pid': '{pid variable value}', 'user': '{user variable value}' }
create_json_from_args() {
    str="{"
    arg_index=0
    for key in "$@"; do
        if [ $arg_index -ne 0 ]
        then
            str+=", "
        fi
        value=$(eval "echo \$$key")
        case value in
                ?(+|-)+([0-9])?(\.+([0-9])))  str+="\"$key\":$value"      ;;
            *)                                escapedValue="${value//\\/#}"
                                              escapedValue="${escapedValue//\"/ \\\"}"
                                              str+="\"$key\":\"$escapedValue\"";;
        esac
        arg_index=$((arg_index+1))
    done
    str+="}"
    echo "$str"
}

# Creates a serialized array of jsons
# Example: serialize_json_array "${arr[@]}"
# Result: [{...}, {...}, ..., {...}]
serialize_json_array() {
    str="["
    arg_index=0
    for var in "$@"; do
        if [ $arg_index -ne 0 ]; then
            str+=", "
        fi
        str+=$var
        arg_index=$((arg_index+1))
    done
    str+="]"

    echo "$str"
}

jsons=()


psTmpFile="$tempDir/psTmpFile.tmp"
if [ "$os" = "mac" ]; then
    ps -eo pid,ppid,user,etime,time,%mem,%cpu,comm >${psTmpFile}
    sed -i -e 1,1d ${psTmpFile}
    sort -k6 ${psTmpFile} >${psTmpFile}2
    cp ${psTmpFile}2 ${psTmpFile}
fi


if [ "$os" = "linux" ]; then
    ps -eo pid,ppid,euser,etime,time,%mem,%cpu,cmd --sort=%mem >${psTmpFile}
    sed -i -e 1,1d ${psTmpFile}
fi


if [ "$destinationCloud" = true ]; then
    # Print csv header
    echo "PID,PPID,User,StartTime,RunTime,Mem,CPU,CMD">>"${resultOutputDir}${resultFileName}"
fi

while IFS=$'\n' read -r line
    do
        pid=$(echo "$line" | awk '{print $1}')
        ppid=$(echo "$line" | awk '{print $2}')
        user=$(echo "$line" | awk '{print $3}')
        startTime=$(echo "$line" | awk '{print $4}')
        runTime=$(echo "$line" | awk '{print $5}')
        mem=$(echo "$line" | awk '{print $6}')
        cpu=$(echo "$line" | awk '{print $7}')
        cmd=$(echo "$line" | awk '{print $8}')

        if [ ! -z "$pid" ]
            then
                if [ "$destinationCloud" = true ]; then
                    echo "${pid},${ppid},${user},${startTime},${runTime},${mem},${cpu},${cmd}">>"${resultOutputDir}${resultFileName}"
                fi
                if [ "$destinationDataset" = true ]; then
                    previousIFS=$IFS
                    IFS=''
                    jsons+=($(create_json_from_args "pid" "ppid" "user" "startTime" "runTime" "mem" "cpu" "cmd"))
                    IFS=$previousIFS=$IFS
                fi
        fi
done <${psTmpFile}



if [ -z "$S1_OUTPUT_DESTINATION" ] || [ "$destinationDataset" = true ]; then
    echo $(serialize_json_array "${jsons[@]}") > "$datasetFilePath"
fi

if [ -d "$tempDir" ]; then
    rm -rf "$tempDir"
fi


echo "Done!"
exit 0